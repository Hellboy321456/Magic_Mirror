ndhp.js
const NodeHelper = require("node_helper");
const { SerialPort } = require("serialport");  // Updated import for newer versions of serialport

module.exports = NodeHelper.create({
  start: function() {
    console.log("MMM-RadarPresence helper started...");
    this.motionDetected = false;

    // Adjust the port path to match your operating system
    const port = new SerialPort({
      path: "COM3",  // Update to your correct COM port on Windows (e.g., COM3, COM4)
      baudRate: 115200,
    });

    // Handle errors from the serial port
    port.on("error", (err) => {
      console.log("SerialPort error:", err.message);
    });

    // Handle incoming data from the radar sensor
    port.on("data", (data) => {
      const rawData = data.toString().trim();
      console.log("Received raw data:", rawData);  // Log received data for debugging

      if (rawData.includes("mov") || rawData.includes("occ")) {
        // Example: "mov, 1 78"
        let parts = rawData.split(" ");  // Split the string to extract relevant data
        if (parts.length >= 2) {
          let zone = parseInt(parts[1], 10);  // Convert zone to an integer for comparison
          console.log("Detected Zone:", zone);  // Log the detected zone for debugging

          // If motion is detected in a close zone (0-2)
          if (zone < 3) {
            this.motionDetected = true;  // Motion is detected
          } else {
            this.motionDetected = false;  // No motion detected
          }

          // Send the motion detection status to the frontend
          this.sendSocketNotification("RADAR_UPDATE", this.motionDetected);
        }
      }
    });
  },

  // Respond to MagicMirror frontend requests
  socketNotificationReceived: function(notification, payload) {
    if (notification === "CHECK_RADAR") {
      // Send the latest motion data to the frontend
      this.sendSocketNotification("RADAR_UPDATE", this.motionDetected);
    }
  },
});



.js
Module.register("MMM-RadarPresence", {
  // Default module configuration
  defaults: {
    updateInterval: 5000, // How often to check the radar for updates (in milliseconds)
  },

  start: function() {
    this.motionDetected = false;  // Initialize the motion detection flag
    this.scheduleUpdate();  // Start checking for updates
  },

  // Schedule periodic updates from the backend
  scheduleUpdate: function() {
    setInterval(() => {
      this.sendSocketNotification("CHECK_RADAR");
    }, this.config.updateInterval);
  },

  // Handle incoming socket notifications from the backend
  socketNotificationReceived: function(notification, payload) {
    if (notification === "RADAR_UPDATE") {
      // Update motionDetected status with the payload value
      this.motionDetected = payload;
      this.updateDom();  // Refresh the display to reflect the updated motion state
    }
  },

  // Create the DOM content for displaying the motion detection status
  getDom: function() {
    var wrapper = document.createElement("div");

    if (this.motionDetected) {
      // If motion is detected, show an active message
      wrapper.innerHTML = "Motion Detected!";
      wrapper.className = "bright";  // Highlight with bright styling
    } else {
      // If no motion is detected, show a standby message
      wrapper.innerHTML = "No Motion Detected";
      wrapper.className = "dimmed";  // Dim the message for standby mode
    }

    return wrapper;
  },
});



pckg.json
{
    "name": "mmm-radarpresence",  
    "version": "1.0.0",
    "description": "A MagicMirror module for controlling the mirror using radar motion detection.",
    "dependencies": {
      "serialport": "^13.0.0"
    }
  }
  
